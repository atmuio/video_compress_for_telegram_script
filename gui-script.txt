import os
import sys
import subprocess
import threading
import tkinter as tk
from tkinter import filedialog, ttk, messagebox
from pathlib import Path

class TelegramVideoCompressorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Telegram Video Compressor")
        self.root.geometry("600x500")
        self.root.resizable(True, True)
        
        # Variabili
        self.input_file = tk.StringVar()
        self.output_file = tk.StringVar()
        self.bitrate = tk.StringVar(value="10000")
        self.crf = tk.StringVar(value="22")
        self.preset = tk.StringVar(value="slow")
        self.progress_var = tk.DoubleVar()
        self.status_var = tk.StringVar(value="Pronto")
        
        # Impostazioni UI
        self.setup_ui()
    
    def setup_ui(self):
        # Frame principale
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Input file
        ttk.Label(main_frame, text="File Video di Input:").grid(column=0, row=0, sticky=tk.W, pady=5)
        ttk.Entry(main_frame, textvariable=self.input_file, width=50).grid(column=0, row=1, sticky=tk.EW, padx=5)
        ttk.Button(main_frame, text="Sfoglia...", command=self.browse_input).grid(column=1, row=1, padx=5)
        
        # Output file
        ttk.Label(main_frame, text="File Video di Output:").grid(column=0, row=2, sticky=tk.W, pady=5)
        ttk.Entry(main_frame, textvariable=self.output_file, width=50).grid(column=0, row=3, sticky=tk.EW, padx=5)
        ttk.Button(main_frame, text="Sfoglia...", command=self.browse_output).grid(column=1, row=3, padx=5)
        
        # Impostazioni
        settings_frame = ttk.LabelFrame(main_frame, text="Impostazioni di Compressione")
        settings_frame.grid(column=0, row=4, columnspan=2, sticky=tk.EW, pady=10, padx=5)
        
        # Bitrate
        ttk.Label(settings_frame, text="Bitrate (kbps):").grid(column=0, row=0, sticky=tk.W, pady=5, padx=5)
        ttk.Entry(settings_frame, textvariable=self.bitrate, width=10).grid(column=1, row=0, sticky=tk.W, pady=5, padx=5)
        
        # CRF
        ttk.Label(settings_frame, text="CRF (18-28):").grid(column=0, row=1, sticky=tk.W, pady=5, padx=5)
        crf_scale = ttk.Scale(settings_frame, from_=18, to=28, variable=self.crf, orient=tk.HORIZONTAL)
        crf_scale.grid(column=1, row=1, sticky=tk.EW, pady=5, padx=5)
        ttk.Label(settings_frame, textvariable=self.crf).grid(column=2, row=1, sticky=tk.W, pady=5)
        
        # Preset
        ttk.Label(settings_frame, text="Preset:").grid(column=0, row=2, sticky=tk.W, pady=5, padx=5)
        presets = ["ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow"]
        preset_combo = ttk.Combobox(settings_frame, textvariable=self.preset, values=presets, state="readonly")
        preset_combo.grid(column=1, row=2, sticky=tk.W, pady=5, padx=5)
        preset_combo.current(6)  # Imposta 'slow' come default
        
        # Pulsanti
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(column=0, row=5, columnspan=2, sticky=tk.EW, pady=10)
        ttk.Button(button_frame, text="Comprimi Video", command=self.compress_video).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Annulla", command=self.cancel_compression).pack(side=tk.LEFT, padx=5)
        
        # Progress bar
        ttk.Label(main_frame, text="Progresso:").grid(column=0, row=6, sticky=tk.W, pady=5)
        self.progress_bar = ttk.Progressbar(main_frame, variable=self.progress_var, maximum=100)
        self.progress_bar.grid(column=0, row=7, columnspan=2, sticky=tk.EW, padx=5)
        
        # Status
        ttk.Label(main_frame, textvariable=self.status_var).grid(column=0, row=8, columnspan=2, sticky=tk.W, pady=5)
        
        # Info
        info_frame = ttk.LabelFrame(main_frame, text="Informazioni")
        info_frame.grid(column=0, row=9, columnspan=2, sticky=tk.EW, pady=10, padx=5)
        info_text = "Questo strumento comprime i video per Telegram, che ha un limite di 2GB.\n"
        info_text += "Riduci il bitrate per file più piccoli, ma ricorda che valori più bassi riducono la qualità.\n"
        info_text += "CRF più basso = qualità migliore, ma file più grande."
        ttk.Label(info_frame, text=info_text, wraplength=550).grid(column=0, row=0, sticky=tk.W, pady=5, padx=5)
        
        # Configurazione del ridimensionamento
        main_frame.columnconfigure(0, weight=1)
        settings_frame.columnconfigure(1, weight=1)
        
        # Inizializza la variabile di processo
        self.ffmpeg_process = None
    
    def browse_input(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Video files", "*.mp4 *.mkv *.avi *.mov *.wmv *.flv *.webm"), ("All files", "*.*")]
        )
        if file_path:
            self.input_file.set(file_path)
            # Suggerisce un nome file di output basato sull'input
            input_path = Path(file_path)
            suggested_output = input_path.with_stem(f"{input_path.stem}_telegram").with_suffix(input_path.suffix)
            self.output_file.set(str(suggested_output))
    
    def browse_output(self):
        file_path = filedialog.asksaveasfilename(
            defaultextension=".mp4",
            filetypes=[("MP4 files", "*.mp4"), ("All files", "*.*")]
        )
        if file_path:
            self.output_file.set(file_path)
    
    def compress_video(self):
        # Verifica input
        if not self.input_file.get():
            messagebox.showerror("Errore", "Seleziona un file video di input.")
            return
        
        if not self.output_file.get():
            messagebox.showerror("Errore", "Specifica un file video di output.")
            return
        
        # Verifica FFmpeg
        if not self.check_ffmpeg():
            messagebox.showerror("Errore", "FFmpeg non trovato. Assicurati che sia installato e nel PATH.")
            return
        
        # Aggiorna stato
        self.status_var.set("Preparazione...")
        self.progress_var.set(0)
        
        # Prepara il comando FFmpeg
        cmd = [
            "ffmpeg",
            "-i", self.input_file.get(),
            "-c:v", "libx264",
            "-preset", self.preset.get(),
            "-crf", self.crf.get(),
            "-b:v", f"{self.bitrate.get()}k",
            "-maxrate", f"{int(self.bitrate.get()) * 1.2}k",
            "-bufsize", f"{int(self.bitrate.get()) * 1.5}k",
            "-c:a", "aac",
            "-b:a", "192k",
            "-y",  # Sovrascrivi file esistenti
            self.output_file.get()
        ]
        
        # Avvia il processo in un thread separato
        self.ffmpeg_thread = threading.Thread(target=self.run_ffmpeg, args=(cmd,))
        self.ffmpeg_thread.daemon = True
        self.ffmpeg_thread.start()
    
    def run_ffmpeg(self, cmd):
        try:
            self.status_var.set("Compressione in corso...")
            
            # Avvia il processo FFmpeg
            self.ffmpeg_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True,
                bufsize=1
            )
            
            # Leggi l'output per aggiornare il progresso
            for line in self.ffmpeg_process.stderr:
                if "frame=" in line and "time=" in line:
                    try:
                        # Estrai il tempo corrente
                        time_parts = line.split("time=")[1].split()[0].split(":")
                        seconds = float(time_parts[0]) * 3600 + float(time_parts[1]) * 60 + float(time_parts[2])
                        
                        # Ottieni la durata del video di input
                        if not hasattr(self, 'input_duration'):
                            self.input_duration = self.get_video_duration(self.input_file.get())
                        
                        # Calcola la percentuale di completamento
                        if self.input_duration > 0:
                            progress = min(100, (seconds / self.input_duration) * 100)
                            self.progress_var.set(progress)
                            self.root.update_idletasks()
                    except:
                        pass
            
            # Attendi il completamento
            self.ffmpeg_process.wait()
            
            # Controlla l'esito
            if self.ffmpeg_process.returncode == 0:
                # Verifica dimensione del file
                size_mb = os.path.getsize(self.output_file.get()) / (1024 * 1024)
                if size_mb <= 2048:
                    self.status_var.set(f"Compressione completata! Dimensione: {size_mb:.2f} MB")
                    messagebox.showinfo("Completato", f"Video compresso con successo!\nDimensione: {size_mb:.2f} MB")
                else:
                    self.status_var.set(f"Attenzione: Il file è ancora {size_mb:.2f} MB, oltre il limite di 2GB")
                    messagebox.showwarning("Attenzione", f"Il video è stato compresso, ma è ancora {size_mb:.2f} MB, oltre il limite di 2GB di Telegram. Prova a ridurre il bitrate.")
            else:
                self.status_var.set("Errore durante la compressione")
                messagebox.showerror("Errore", "Si è verificato un errore durante la compressione del video.")
        except Exception as e:
            self.status_var.set(f"Errore: {str(e)}")
            messagebox.showerror("Errore", f"Si è verificato un errore: {str(e)}")
        finally:
            self.progress_var.set(100)
            self.ffmpeg_process = None
    
    def cancel_compression(self):
        if self.ffmpeg_process:
            # Termina il processo FFmpeg
            try:
                self.ffmpeg_process.terminate()
                self.status_var.set("Compressione annullata")
            except:
                pass
    
    def check_ffmpeg(self):
        try:
            subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            return True
        except:
            return False
    
    def get_video_duration(self, file_path):
        cmd = ["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of", 
               "default=noprint_wrappers=1:nokey=1", file_path]
        try:
            output = subprocess.check_output(cmd, universal_newlines=True)
            return float(output.strip())
        except:
            return 0

def main():
    root = tk.Tk()
    app = TelegramVideoCompressorGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()